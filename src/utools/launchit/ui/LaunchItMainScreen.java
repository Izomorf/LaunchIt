/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package utools.launchit.ui;

import com.melloware.jintellitype.HotkeyListener;
import com.melloware.jintellitype.JIntellitype;
import java.awt.AWTException;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowStateListener;
import java.io.IOException;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import static utools.launchit.LaunchItApp.getLogFileHandler;
import utools.launchit.LaunchItConstants;
import utools.launchit.LaunchItDbEntry;
import utools.launchit.db.LaunchItDatabase;

/**
 *
 * @author ruinmaxk
 */
public class LaunchItMainScreen extends javax.swing.JFrame {
    private static Logger log = Logger.getLogger(LaunchItMainScreen.class.getName());
    
    String inputString;
    TrayIcon trayIcon;
    ImageIcon appIcon;
    
    /**
     * Creates new form MainScreen
     */
    public LaunchItMainScreen() {
        initComponents();
        
        appIcon = new ImageIcon(getClass().getResource("/utools/launchit/res/lollipop_big.png"));
        trayIcon = new TrayIcon(new ImageIcon(getClass()
                .getResource("/utools/launchit/res/lollipop.png")).getImage(),
                "LaunchIt");

        try {
            log.addHandler(getLogFileHandler());
        } catch (SecurityException e) {
            log.log(Level.SEVERE,
                "Cannot create log file due to Security Exception: ", e);
        }
        
        JIntellitype.getInstance().addHotKeyListener(new HotkeyListener() {
            @Override
            public void onHotKey(int i) {
                if (i == 1) {
                    setVisible(true);
                    setState(NORMAL);
                    SystemTray.getSystemTray().remove(trayIcon);
                }
            }
        });
        
        JIntellitype.getInstance().registerHotKey(1, JIntellitype.MOD_ALT, KeyEvent.VK_SPACE);
        //JIntellitype.getInstance().registerHotKey(2, 0,  (int)'A');
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                JIntellitype.getInstance().cleanUp();
            }
        });
        addWindowStateListener(new WindowStateListener() {
            @Override
            public void windowStateChanged(WindowEvent e) {
                if (e.getNewState() == ICONIFIED) {
                    try {
                        trayIcon.addMouseListener(new MouseAdapter() {
                            @Override
                            public void mouseClicked(MouseEvent e) {
                                setVisible(true);
                                setState(NORMAL);
                                SystemTray.getSystemTray().remove(trayIcon);
                            }
                        });
                        
                        SystemTray.getSystemTray().add(trayIcon);
                        setVisible(false);
                    } catch (AWTException exception) {
                        log.log(Level.SEVERE, "Cannot minimize application to System Tray");
                    }
                }
            }
        });
        setIconImage(appIcon.getImage());
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        inputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputField, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (inputField.getText().equalsIgnoreCase("database")) {
                LaunchItDbScreen dbScreen = new LaunchItDbScreen();
                dbScreen.setVisible(true);
            }
            if (inputField.getText().equalsIgnoreCase("exit")) {
                dispose();
                System.exit(0);
            }            
            inputString = inputField.getText();
            Set<String> keys;
            String alias;
            List<LaunchItDbEntry> dbEntries = LaunchItDatabase.getInstance().querySelectAll();
            for (LaunchItDbEntry appEntry : dbEntries) {
                alias = appEntry.getValue(LaunchItConstants.COLUMN_ALIAS);
                if (alias.equals(inputString)) {
                    String path = appEntry.getValue(LaunchItConstants.COLUMN_PATH);
                    try {
                        Runtime.getRuntime().exec(path);
                        setState(ICONIFIED);
                    } catch (IOException e) {
                        
                    }
                    break;
                }
            }
        }
    }//GEN-LAST:event_inputFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LaunchItMainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LaunchItMainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LaunchItMainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LaunchItMainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LaunchItMainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField inputField;
    // End of variables declaration//GEN-END:variables
}
